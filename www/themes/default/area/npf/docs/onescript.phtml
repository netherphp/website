<?php

$this->Set('page-title','OneScript');
$this->Set('page-subtitle','Optimise your client-side scripting into singular bundles.');
$this->Set('page-navigation',[
	new Website\Item([ 'Name'=>'Home', 'URL'=>'/' ]),
	new Website\Item([ 'Name'=>'Nether PHP Framework', 'URL'=>'/npf/' ]),
	new Website\Item([ 'Name'=>$this->Get('page-title') ])
]);

echo (new Website\Block\ContentHeader);
echo (new Website\Block\NavigationBar);

?>

<div class="PageSection"><div>
	<h2 class="NetherHeader">About</h2>
	<p>OneScript is a utility designed to help you optmise the distribution of your front-end scripting. After installing you can jump right in by executing <code>php vendor/bin/nether-onescript help</code>, in the following sections there are a few easy to grok cases where OneScript can help you out.</p>
	<p>It works on the premise that your scripting has files which much be loaded before any others (framework). It will take those files and merge them into a single file. Afterwards, it searches for any additional files (plugins) and appends them after that. The result is one script that has the entire project built into it. It does not modify the code at all, it mearly creates a redistributable package of the code which is easy to update (rebuild) if you ever make changes later to any of the original source files. This is achieved by a JSON file which defines how the project should be built.</p>
</div></div>

<div class="PageSection"><div>
	<h2 class="NetherHeader">Installing</h2>
	<p>Add to Composer and go.</p>
	<pre>require { "netherphp/onescript":"^1.1" }</pre>
</div></div>

<div class="PageSection NUI-Folderr"><div>
	<h2 class="NetherHeader NUI-Folder-Title">
		<i class="fa fa-caret-right"></i>
		The JSON Build File Schema.
	</h2>
	<div class="NUI-Folder-Inner">
		<p>To generate a default project file you can run a command like this, changing the path to be where you want the <tt>onescript.json</tt> file generated.</p>
		<p><code>php vendor/bin/nether-onescript build www/share/test</code></p>
		<p>This command will have generated a <tt>www/share/test</tt> directory containing a file called <tt>onescript.json</tt>, as well as a directory called <tt>src</tt>. Most of these options can be defined on the CLI as well, but here are the defaults.</p>
		<?php echo (new Website\Block\Code)
		->SetFile(sprintf('%s/www/code/npf/onescript/schema.json',PROJECT_ROOT))
		->SetRenderer($javascript) ?>
		<p class="TextCenter"><a href="/npf/onescript/schema" class="Button">Would you like to know more?</a></p>
	</div>
</div></div>

<div class="PageSection NUI-Folder"><div>
	<h2 class="NetherHeader NUI-Folder-Title">
		<i class="fa fa-caret-right"></i>
		Problem: Handling a messy pile of jQuery plugins.
	</h2>
	<div class="NUI-Folder-Inner">
		<p>One of the simplest ways to demonstrate the utility of OneScript is with jQuery. Love it or hate it, if you have used it you cannot really deny that it can get pretty messy when you start bolting on third-party extensions to it willy nilly. In a rush we will just start appending more script tags after the original jQuery script, and before we know it we have this large slow messy pile of separate scripts probably killing the mobile browsers.</p>
		<pre class="CodeBlock"><?php echo $html->highlight(file_get_contents(sprintf('%s/www/code/npf/onescript/problem.txt',PROJECT_ROOT))) ?></pre>
		<p>This is a problem especally for low power devices for two main reasons.</p>
		<p>First, depending on the resources available to the browser and the configuration of the server, the browser may actually establish multiple socket connections to the server to download the scripts. Establishing connections are much slower than the act of actually downloading small text files. Second, because of the first, the browser may have to delay execution until it has all the scripts ready to go. This could give your page the appearance of <em>looking</em> ready to go, even though it is unresponsive until the rest of the scripts finish in the background.</p>
		<p>What if you could just load one script instead? One connection, one process of downloading and script preparation. Not only will the entire page (often) download faster, but it will be responsive faster. The browser may not have to delay execution - meaning your jQuery(document).ready() will execute sooner.</p>
		<pre class="CodeBlock"><?php echo $html->highlight(file_get_contents(sprintf('%s/www/code/npf/onescript/answer.txt',PROJECT_ROOT))) ?></pre>
		<p>This is what OneScript helps you do, as well as making it easy to update those compiled scripts later.</p>
		<p class="TextCenter"><a href="/npf/onescript/jquery" class="Button">Would you like to know more?</a></p>
	</div>
</div></div>

<div class="PageSection NUI-Folder"><div>
	<h2 class="NetherHeader NUI-Folder-Title">
		<i class="fa fa-caret-right"></i>
		Problem: Using Composer to install Javascript assets.
	</h2>
	<div class="NUI-Folder-Inner">
		<p>Composer was not designed to install Javascript or any other client-side resources. It does however work marvelously. Why bother cluttering up the project with NPM or Bower when we can just work with what we already have?</p>
		<p>With very little effort you can create a Composer package for your Javascript resources and deploy them to the public web space with OneScript. This site you are browsing now uses OneScript to deploy NUI.</p>
		<p class="TextCenter"><a href="/npf/onescript/composer" class="Button">Would you like to know more?</a></p>
	</div>
</div></div>

<!--
<div class="PageSection"><div>
	<script async class="speakerdeck-embed" data-id="2a123384df4e4bc5a518004ab88bde4f" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>
</div></div>

<div class="PageSection"><div>
	<script async class="speakerdeck-embed" data-id="4901827409ac4a7e9980474a30f3b471" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>
</div></div>
-->